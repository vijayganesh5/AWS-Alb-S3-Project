Imagine you're setting up a small online business:

1.  **S3 & CloudWatch (The Filing Cabinet & Security Logs):** You need a secure digital filing cabinet (S3 bucket) to store your product photos and documents. You'll also set up a security camera system (CloudWatch) to log who puts files in it.
2.  **EC2 & Load Balancer (The Shop Assistants & The Welcome Desk):** You're hiring two shop assistants (EC2 instances) to serve your customers. To make sure no single assistant gets overwhelmed, you place a welcome desk (Load Balancer) at the entrance. This desk greets customers and directs them to the assistant who is most free.

Now, let's look at the technical steps.

---

### Part 1: The Secure Filing Cabinet (S3 & CloudWatch)

**Goal:** Create a private storage space, upload a file, and see a log of that action.

**Steps:**

1.  **Create the S3 Bucket (Your Filing Cabinet):**
    *   Go to the AWS S3 service.
    *   Click "Create bucket."
    *   Give it a unique name (e.g., `my-secure-files-123`).
    *   **Crucially, under "Block Public Access," make sure ALL the settings are checked.** This ensures your files are never accidentally made public on the internet.
    *   Keep other settings as default and create the bucket.

2.  **Upload a File:**
    *   Click on your new bucket's name to open it.
    *   Click the "Upload" button and choose any file from your computer (e.g., a `test.txt` file or a picture).
    *   Upload it.

3.  **View the Logs in CloudWatch (Check the Security Camera):**
    *   S3 can be configured to send logs to CloudWatch.
    *   Go to the AWS CloudWatch service.
    *   In the left menu, click on "Logs" and then "Log Groups."
    *   You will look for a Log Group related to your S3 bucket (it might not be created by default; for this task, you might need to enable S3 server access logging first and point it to a CloudWatch Log Group).
    *   Once you find the right log stream, you can open it and see a log entry with a timestamp showing that a `PUT` request was made (which is the upload action you just performed).

---

### Part 2: The Shop Assistants & Welcome Desk (EC2 & Load Balancer)

**Goal:** Launch two servers and put a "traffic director" in front of them so that visitors only see the director's address.

**Steps:**

1.  **Launch the First EC2 Instance (First Shop Assistant):**
    *   Go to the AWS EC2 service.
    *   Click "Launch Instance."
    *   Choose an Amazon Machine Image (AMI), like **Amazon Linux**.
    *   Choose an instance type (e.g., `t2.micro`, which is free tier eligible).
    *   In the "Advanced Details" section at the bottom, paste a simple **User Data** script. This script will automatically install a web server when the machine starts up.
        ```bash
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
        ```
    *   Create a new security group that allows HTTP (port 80) traffic.
    *   Launch the instance.

2.  **Launch the Second EC2 Instance (Second Shop Assistant):**
    *   Repeat the **exact same steps** as for the first instance. This will create an identical second server.

3.  **Create the Application Load Balancer (The Welcome Desk):**
    *   While in the EC2 console, look in the left menu for **"Load Balancing" -> "Load Balancers"**.
    *   Click "Create Load Balancer" and choose **Application Load Balancer**.
    *   Give it a name and select at least two Availability Zones (this is how it connects to your EC2 instances).
    *   In the "Listeners and routing" section, set up a listener for HTTP on port 80 and create a **new target group**. A target group is just a named list of the servers (your EC2 instances) the Load Balancer will send traffic to.
    *   Create the Load Balancer.

4.  **Register Your Instances (Tell the Desk who the Assistants are):**
    *   Once the Load Balancer is active, go to **"Target Groups"** in the left EC2 menu.
    *   Select the target group you just created.
    *   Go to the "Targets" tab and click "Register targets."
    *   Select your two running EC2 instances and add them to the group. They should now show a status of `healthy`.

### The Final Check: Seeing it Work

1.  Go back to the **Load Balancers** section in the EC2 console.
2.  Copy the **DNS Name** of your Load Balancer (it will look like `my-load-balancer-1234.us-east-1.elb.amazonaws.com`).
3.  Paste this DNS name into your web browser's address bar and hit enter.

**What you should see:**
The browser will show a "Hello World" message. The key thing is that if you **refresh the page**, the message might switch between the two EC2 instance IDs or hostnames (e.g., from "ip-172-31-45-100" to "ip-172-31-46-200"). This proves the Load Balancer is distributing traffic between your two servers.

**Why the traffic shows the Load Balancer's IP:**
When you connect to the website, you are connecting to the Load Balancer's address, not the EC2 instance directly. The Load Balancer then makes a separate, private connection to the EC2 instance to get the webpage. From your perspective, the entire interaction is with the Load Balancer, so you only see its IP address.

By completing these steps, you will have successfully worked with the core AWS services: **S3** for storage, **CloudWatch** for monitoring, **EC2** for computing, and **ELB** for traffic distribution and high availability.